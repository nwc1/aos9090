#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>

void sighup(int);
void sigint(int);
void sigquit(int);

int main() {
    int pid, i, j;

    if ((pid = fork()) < 0) {
        perror("fork");
        exit(1);
    }

    if (pid == 0) { // Child process
        signal(SIGHUP, sighup);
        signal(SIGINT, sigint);
        signal(SIGQUIT, sigquit);
        for (;;) {
            // Child process should do some useful work or sleep
            sleep(1);
        }
    } else { // Parent process
        j = 0;
        for (i = 1; i <= 5; i++) {
            j++;
            printf("PARENT: sending SIGHUP signal: %d\n", j);
            kill(pid, SIGHUP);
            sleep(3);
            printf("PARENT: sending SIGINT signal: %d\n", j);
            kill(pid, SIGINT);
            sleep(3);
        }
        sleep(3);
        printf("PARENT: sending SIGQUIT\n");
        kill(pid, SIGQUIT);
    }
    return 0;
}

void sighup(int signum) {
    signal(SIGHUP, sighup);
    printf("child: I have received SIGHUP\n");
}

void sigint(int signum) {
    signal(SIGINT, sigint);
    printf("child: I have received SIGINT\n");
}

void sigquit(int signum) {
    printf("child: My Daddy has killed me. Exiting.\n");
    exit(0);
}
